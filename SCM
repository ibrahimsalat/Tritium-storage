import numpy as np 
import matplotlib.pyplot as plt
initial_pellet_size = 50 #microns
shrinking_step = 1
rho_u = 0.08/(100**3)
rho_uh3 = 0.045/(100**3)
T = 310

c_b =  39.7
b = 0.67

viscosity = (8.76*10e-6)*(365.85/(T+72))*((T/293.85)**1.5)
d = 1.032*1e-4 * T**1.74
v = 0.5
rho_h = 0.081

#every unit cell has 8 uranium 

def reaction_rate(T):
    return 0.51*((8.314*T)**0.5)*np.exp(-3033/T)

kr = reaction_rate(T)

def diffusivity_constant(T):
    return 2.11e-10*np.exp(-2300/(8.314*T))

de = diffusivity_constant(T)


def core_radius(initial_pellet_size, shrinking_step):
    core_radius_values =  np.arange(initial_pellet_size,-1, - shrinking_step )
    return core_radius_values
    
r_c = core_radius(initial_pellet_size, shrinking_step)

def mass_transfer():
    kg = np.zeros(initial_pellet_size+1)
    sc = viscosity/d
    for i in range(initial_pellet_size+1):
        re = rho_h*v*2*r_c[i]*1e-6/viscosity
        kg[i] = (2 + 0.6*(sc**(1/3)) + (re**0.5))*(d/10e4)/(2*r_c[i]*1e-6)
    return kg

kg = mass_transfer()
def outer_radius(initial_pellet_size, rho_u, rho_uh3):
    outer_radius_values = np.zeros(initial_pellet_size+1)
    for i in range(initial_pellet_size+1):
        outer_radius_values[i] =((((initial_pellet_size*1e-6)**3)-((r_c[i]*1e-6)**3))*
                                 (rho_u/rho_uh3)+((r_c[i]*1e-6)**3))**(1/3)
    return outer_radius_values

r_o = outer_radius(initial_pellet_size, rho_u, rho_uh3)

def const(kr, kg):
    a =  np.zeros(initial_pellet_size+1)
    b =  np.zeros(initial_pellet_size+1)
    e =  np.zeros(initial_pellet_size+1)
    const = np.zeros(initial_pellet_size+1)
    for i in range(initial_pellet_size+1):
        a[i] = (((r_c[i]*1e-6)**2)*kr)/((r_o[i]**2)*kg[i])
        b[i] = ((r_c[i]*1e-6)*kr)/(de)
        e[i] = (((r_c[i]*1e-6)**2)*kr)/(de*r_o[i])
        const[i] = a[i]+b[i]-e[i]
    return const
const = const(kr,kg)


def core_concentration(c_b):
    c_c = np.zeros(initial_pellet_size+1)
    for i in range(initial_pellet_size+1):
        c_c[i] = ((-const[i] + np.sqrt((const[i]**2)+(4*c_b)))/2)**2
    return c_c

c_c = core_concentration(c_b)
#print(c_c)

def time_taken(b):
    time_diff = np.zeros(initial_pellet_size+1)
    for i in range(initial_pellet_size+1):
        time_diff[i] = ((1e-6)*rho_u)/(b*kr*np.sqrt(c_c[i]))
    
    time = np.cumsum(time_diff)
    return time

time = time_taken(0.667)


y =  np.log10(c_c)
plt.scatter(r_c, y)
plt.show()

relative_dim = r_c/50
plt.xlabel("time (s)")
plt.ylabel("Relative dimension (r/R)")
plt.scatter(time, relative_dim)
plt.show()
